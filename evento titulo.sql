
/* Runtime-info
Application: CadastroTelasAdicionais
Referer: http://erp.redectc.com.br:40024/mge/flex/CadastroTelasAdicionais.swf/[[DYNAMIC]]/3
ResourceID: br.com.sankhya.core.cfg.TelasPersonalizadas
service-name: TelasAdicionais.importarEntidade
uri: /mge/service.sbr
*/
CREATE         PROCEDURE [sankhya].[AD_EVE_INS_TIT_TGFTGF] (
       @P_TIPOEVENTO INTEGER,    -- Identifica o tipo de evento
       @P_IDSESSAO VARCHAR(MAX), -- Identificador da execução. Serve para buscar informações dos campos da execução.
       @P_CODUSU INTEGER         -- Código do usuário logado
) AS
DECLARE
       @BEFORE_INSERT      INTEGER,
       @AFTER_INSERT       INTEGER,
       @BEFORE_DELETE      INTEGER,
       @AFTER_DELETE       INTEGER,
       @BEFORE_UPDATE      INTEGER,
       @AFTER_UPDATE       INTEGER,
       @BEFORE_COMMIT      INTEGER,
	   @P_DTINC            DATETIME,
	   @P_DTINI            DATETIME,
	   @P_DTFIN            DATETIME,
	   @P_CODLOJA          VARCHAR(1),
	   @P_LOJA             INTEGER,
	   @NUNICO             INTEGER,
	   @P_DTLIMITE         DATETIME
BEGIN
       SET @BEFORE_INSERT = 0
       SET @AFTER_INSERT  = 1
       SET @BEFORE_DELETE = 2
       SET @AFTER_DELETE  = 3
       SET @BEFORE_UPDATE = 4
       SET @AFTER_UPDATE  = 5
       SET @BEFORE_COMMIT = 10

	   SET @NUNICO = sankhya.EVP_GET_CAMPO_INT(@P_IDSESSAO, 'NUNICO');
       
/*******************************************************************************
	  E possivel obter o valor dos campos atraves das Functions:
   
	  EXECUTE EVP_GET_CAMPO_DTA P_IDSESSAO, 'NOMECAMPO'   -- PARA CAMPOS DE DATA
	  EXECUTE EVP_GET_CAMPO_INT P_IDSESSAO, 'NOMECAMPO'   -- PARA CAMPOS NUMERICOS INTEIROS
	  EXECUTE EVP_GET_CAMPO_DEC P_IDSESSAO, 'NOMECAMPO'   -- PARA CAMPOS NUMERICOS DECIMAIS
	  EXECUTE EVP_GET_CAMPO_TEXTO P_IDSESSAO, 'NOMECAMPO' -- PARA CAMPOS TEXTO
  
	  O primeiro argumento e uma chave para esta execucao. O segundo es o nome do campo.
  
	  Para os eventos BEFORE UPDATE, BEFORE INSERT e AFTER DELETE todos os campos estarao disponiveis.
	  Para os demais, somente os campos que pertencem a PK
  
	  * Os campos CLOB/TEXT serao enviados convertidos para VARCHAR(4000)
  
	  Tambem e possivel alterar o valor de um campo atraves das Stored procedures:
  
	  EXECUTE EVP_SET_CAMPO_DTA @P_IDSESSAO,  'NOMECAMPO', TO_DATE(VALOR, 'DD-MM-YYYY') -- VALOR DEVE SER UMA DATA
	  EXECUTE EVP_SET_CAMPO_INT @P_IDSESSAO,  'NOMECAMPO', VALOR -- VALOR DEVE SER UM NUMERO INTEIRO
	  EXECUTE EVP_SET_CAMPO_DEC @P_IDSESSAO,  'NOMECAMPO', VALOR -- VALOR DEVE SER UM NUMERO DECIMAL
	  EXECUTE EVP_SET_CAMPO_TEXTO @P_IDSESSAO,  'NOMECAMPO', 'VALOR' -- VALOR DEVE SER UM TEXTO
********************************************************************************/

/*     IF @P_TIPOEVENTO = @BEFORE_INSERT
       BEGIN
             --DESCOMENTE ESTE BLOCO PARA PROGRAMAR O "BEFORE INSERT"
       END*/
    IF @P_TIPOEVENTO = @AFTER_INSERT
       BEGIN
	       
	       SET @NUNICO = sankhya.EVP_GET_CAMPO_INT(@P_IDSESSAO, 'NUNICO');
	      
             SELECT @P_DTINC = DTINC
			      , @P_DTINI = DTINI
				  , @P_DTFIN = DTFIN
				  , @P_CODLOJA = CODLOJA
				  , @P_LOJA = ISNULL(LOJA,0)
				  , @P_CODUSU = CODUSU
			   FROM AD_TGFIGF (NOLOCK)
			  WHERE NUNICO = @NUNICO


			  SELECT @P_DTLIMITE = DATEADD(MONTH, -12, @P_DTINI)
                FROM TGFFIN (NOLOCK)
               INNER JOIN AD_TGFLOJA (NOLOCK) ON AD_TGFLOJA.CODEMP = TGFFIN.CODEMP 
               WHERE DTVENC >= DATEADD(MONTH, -11, @P_DTINI) AND DTVENC <= @P_DTFIN
                 AND RECDESP IN (0,1)
                 AND PROVISAO = 'N'
                 AND ((@P_CODLOJA = 'P' AND ISNULL(AD_TGFLOJA.CODFRANQ, 0) = 1)
            OR(@P_CODLOJA = 'F' AND ISNULL(AD_TGFLOJA.CODFRANQ, 0) <> 1)
            OR @P_CODLOJA = 'A')



				  DELETE AD_TGFTGF WHERE NUNICO = @NUNICO	

			   INSERT INTO AD_TGFTGF
        (NUNICO, CODEMP, CODPARC, CODLOJA, CODFRANQ, CODNAT, NUMNOTA, DTNEG, DTVENC, VLRDESDOB, VLRJUROS, VLRMULTA, VLRDESC, VLRLIQUIDO, CODCTABCOINT, STATUS, SEQUENCIA, DHBAIXA)
    SELECT 
        @NUNICO,TGFFIN.CODEMP, TGFFIN.CODPARC, AD_TGFLOJA.CODLOJA, AD_TGFLOJA.CODFRANQ, TGFFIN.CODNAT, TGFFIN.NUMNOTA, TGFFIN.DTNEG, TGFFIN.DTVENC, TGFFIN.VLRDESDOB, TGFFIN.VLRJURO, TGFFIN.VLRMULTA, TGFFIN.VLRDESC, 
        (ISNULL(TGFFIN.VLRDESDOB, 0) +
         (CASE WHEN TGFFIN.TIPMULTA = '1' THEN ISNULL(TGFFIN.VLRMULTA, 0) ELSE 0 END) +
         (CASE WHEN TGFFIN.TIPJURO = '1' THEN ISNULL(TGFFIN.VLRJURO, 0) ELSE 0 END) + 
         ISNULL(TGFFIN.DESPCART, 0) + 
         ISNULL(TGFFIN.VLRVENDOR, 0) - 
         ISNULL(TGFFIN.VLRDESC, 0) - 
         (CASE WHEN TGFFIN.IRFRETIDO = 'S' THEN ISNULL(TGFFIN.VLRIRF, 0) ELSE 0 END) - 
         (CASE WHEN TGFFIN.ISSRETIDO = 'S' THEN ISNULL(TGFFIN.VLRISS, 0) ELSE 0 END) - 
         (CASE WHEN TGFFIN.INSSRETIDO = 'S' THEN ISNULL(TGFFIN.VLRINSS, 0) ELSE 0 END) - 
         ISNULL(TGFFIN.CARTAODESC, 0) + 
         ISNULL((SELECT ROUND(SUM(I.VALOR * I.TIPIMP), 2) FROM TGFIMF I WHERE I.NUFIN = TGFFIN.NUFIN), 0) + 
         ISNULL(TGFFIN.VLRMULTANEGOC, 0) + 
         ISNULL(TGFFIN.VLRJURONEGOC, 0) - 
         ISNULL(TGFFIN.VLRMULTALIB, 0) - 
         ISNULL(TGFFIN.VLRJUROLIB, 0) + 
         ISNULL(TGFFIN.VLRVARCAMBIAL, 0) * 
         ISNULL(TGFFIN.RECDESP, 0)) AS VLRLIQUIDO, 
        TGFFIN.CODCTABCOINT, NULL, TGFFIN.NUFIN, TGFFIN.DHBAIXA 
    FROM TGFFIN (NOLOCK)
   INNER JOIN AD_TGFLOJA (NOLOCK) ON AD_TGFLOJA.CODPARC = TGFFIN.CODPARC  
   INNER JOIN AD_TGFFRANQ (NOLOCK) ON AD_TGFFRANQ.CODFRANQ = AD_TGFLOJA.CODFRANQ 
   INNER JOIN TGFPAR (NOLOCK) ON TGFPAR.CODPARC = TGFFIN.CODPARC 
   INNER JOIN TGFNAT (NOLOCK) ON TGFNAT.CODNAT = TGFFIN.CODNAT 
   INNER JOIN TSICTA (NOLOCK) ON TSICTA.CODCTABCOINT = TGFFIN.CODCTABCOINT
   WHERE DTVENC >= @P_DTLIMITE AND DTVENC <= @P_DTFIN
    AND RECDESP IN (0,1)
    AND PROVISAO = 'N'
    AND TGFFIN.CODEMP < 10
	AND (@P_LOJA IS NULL OR @P_LOJA = '' OR AD_TGFLOJA.CODLOJA = @P_LOJA)
    AND TGFFIN.CODNAT IN (10010113,10010114,10010115,10010116,10010117,10010308,10010307,10040104,10010107,10010110,10010108,10010109,10010101,10010106,10010301)
    AND ((@P_CODLOJA = 'P' AND ISNULL(AD_TGFLOJA.CODFRANQ, 0) = 1)
            OR(@P_CODLOJA = 'F' AND ISNULL(AD_TGFLOJA.CODFRANQ, 0) <> 1)
            OR @P_CODLOJA = 'A')
       END

/*     IF @P_TIPOEVENTO = @BEFORE_DELETE
       BEGIN
             --DESCOMENTE ESTE BLOCO PARA PROGRAMAR O "BEFORE DELETE"
       END*/
/*     IF @P_TIPOEVENTO = @AFTER_DELETE
       BEGIN
             --DESCOMENTE ESTE BLOCO PARA PROGRAMAR O "AFTER DELETE"
       END*/

/*     IF @P_TIPOEVENTO = @BEFORE_UPDATE
       BEGIN
             --DESCOMENTE ESTE BLOCO PARA PROGRAMAR O "BEFORE UPDATE"
       END*/
/*     IF @P_TIPOEVENTO = @AFTER_UPDATE
       BEGIN
             --DESCOMENTE ESTE BLOCO PARA PROGRAMAR O "AFTER UPDATE"
       END*/

/*     IF @P_TIPOEVENTO = @BEFORE_COMMIT
       BEGIN
             --DESCOMENTE ESTE BLOCO PARA PROGRAMAR O "BEFORE COMMIT"
       END*/

END;
